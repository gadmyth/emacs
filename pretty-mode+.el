(require 'pretty-mode)


(defun load-extra-pretty ()
  (cond
   ((eq major-mode 'java-mode)
	(pretty-regexp "import" "I")
	(pretty-regexp "Boolean.FALSE" "×")
	(pretty-regexp "Boolean.TRUE" "✓")
	(pretty-regexp "TextUtils.isEmpty" "⌘")
	(pretty-regexp "TLog" "L")
	(pretty-regexp "LogUtil" "L")
	(pretty-regexp "Log" "L")
	(pretty-regexp ".equals" "=")
	(pretty-regexp "System.out.println" "L")
	(pretty-regexp "printStackTrace" "T")
	(pretty-regexp "Integer.valueOf" "I")
	(pretty-regexp "Boolean.valueOf" "B")
	(pretty-regexp "Float.valueOf" "F")
	(pretty-regexp "String.valueOf" "S")
	(pretty-regexp "Constants.EMPTY_STR" "\"")
	(pretty-regexp "PrefUtil.setKey" "⤋")
	(pretty-regexp "PrefUtil.getKeyBoolean" "⤊")
	(pretty-regexp "PrefUtil.getKeyString" "⤊")
	(pretty-regexp "PrefUtil.getKeyLong" "⤊")
	(pretty-regexp "PrefUtil.getKeyInt" "⤊")
	(pretty-regexp "NetEngine.getInst()" "≈")
	(pretty-regexp "String" "S")
	(pretty-regexp "intValue" "i")
	(pretty-regexp "booleanValue" "b")
	(pretty-regexp "floatValue" "f")
	(pretty-regexp "try " "T")
	(pretty-regexp "catch " "C")
	(pretty-regexp "Exception" "E")
	(pretty-regexp "finally " "F") ;;finally
	(pretty-regexp "throws" "T") ;;finally
	(pretty-regexp "public static final" "Τ")
	(pretty-regexp "public final static" "Τ")
	(pretty-regexp "public static" "Τ")
	(pretty-regexp "private static final" "Υ")
	(pretty-regexp "private final static" "Υ")
	(pretty-regexp "private static" "Υ")
	(pretty-regexp "static" "s")
	(pretty-regexp "private void" "v")
	(pretty-regexp "private" "p")
	(pretty-regexp "protected void" "v")
	(pretty-regexp "public void" "V")
	(pretty-regexp "public" "P")
	(pretty-regexp "final" "f")
	(pretty-regexp "new" "n")
	(pretty-regexp "class" "c")
	(pretty-regexp "this" "t")
	(pretty-regexp "super" "s"))
   ((eq major-mode 'objc-mode)
	(pretty-regexp "NO" "×")
	(pretty-regexp "YES" "✓")
	(pretty-regexp "NSLog" "L"))
   (t
	(message "other")))
  (pretty-regexp "false" "×")
  (pretty-regexp "true" "✓")
  (pretty-regexp " = " "←")
  (pretty-regexp " == " "≡")
  (pretty-regexp "return" "r")
  (pretty-regexp "int" "i")
  (pretty-regexp "boolean" "b")
  (pretty-regexp "long" "J")
  (pretty-regexp "float" "f")
  (pretty-regexp "!=" "≠")
  (pretty-regexp "!" "¬")
  (pretty-regexp "&&" "∧")
  (pretty-regexp "||" "∨")
  (pretty-regexp "switch " "s")
  (pretty-regexp "case" "c")
  (pretty-regexp "default" "d")
  (pretty-regexp "break" "b")
  (pretty-regexp "else if " "l") ;; else if 
  (pretty-regexp "else " "e")
  (pretty-regexp "if " "i")
  (pretty-regexp "while " "w")
  (pretty-regexp "for " "f")
  )

;;;###autoload
(define-minor-mode pretty-mode+
  :group 'pretty
  :lighter " pretty+"
  (if pretty-mode
	  (load-extra-pretty)
	(font-lock-remove-keywords nil (pretty-keywords))
	(remove-text-properties (point-min) (point-max) '(composition nil))))

(add-hook 'pretty-mode-hook 'pretty-mode+)

(provide 'pretty-mode+)
